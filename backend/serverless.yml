service: serverless-application-cart-items

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  

  tracing: 
    lambda: true
    apiGateway: true

  environment:
    PROJECT_NAME: udacity-p4
    CART_ITEMS_TABLE: serverless-application-cart-items-${self:provider.stage}
    S3_BUCKET_NAME: serverless-application-cart-items-${self:provider.stage}
    SIGNED_EXPIRATION: 300
    
  logs:
    restApi: true

custom:
  documentation:
    api:
      info:
        version: '1.0.0'
        title: serverless-application-cart-item-api
        description: serverless-application-cart-item-api
    models:
      - name: CreateCartItemRequest
        contentType: "application/json"
        schema:
          required:
            - name
            - price
          properties:
            name:
              minLength: 1
              type: string
            price:
              type: number
      - name: UpdateCartItemRequest
        contentType: "application/json"
        schema:
          required:
            - name
            - price
            - done
          properties:
            name:
              minLength: 1
              type: string
            price:
              type: number
            done:
              type: boolean
          

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetCartItems:
    handler: src/lambda/http/getCartItems.handler
    events:
      - http:
          method: get
          path: cart-items
          cors: true
          authorizer: Auth
    role: 'S3CartBucketAccessRole'

 
 
  CreateCartItem:
    handler: src/lambda/http/createCartItem.handler
    events:
      - http:
          method: post
          path: cart-items
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-cart-item-model.json)}
          documentation:
            summary: "Create a new cart item"
            description: "Create a new cart item"
            requestModels:
              "application/json": CreateCartItemRequest
    role: 'S3CartBucketAccessRole'

  
  UpdateCartItem:
    handler: src/lambda/http/updateCartItem.handler
    events:
      - http:
          method: patch
          path: cart-items/{itemId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-cart-item-model.json)}
          documentation:
            summary: "Update a cart item"
            description: "Update a cart item"
            requestModels:
              "application/json": UpdateCartItemRequest
    role: 'S3CartBucketAccessRole'


  DeleteCartItem:
    handler: src/lambda/http/deleteCartItem.handler
    events:
      - http:
          method: delete
          path: cart-items/{itemId}
          cors: true
          authorizer: Auth
    role: 'S3CartBucketAccessRole'

  
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: cart-items/{itemId}/attachment
          cors: true
          authorizer: Auth
    role: 'S3CartBucketAccessRole'

resources:
  Resources:
    CartItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CART_ITEMS_TABLE}

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 300 

    S3CartBucketAccessRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: S3CartBucketAccessRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: 'lambda.amazonaws.com'
              Action: 'sts:AssumeRole'
        Policies:
          - PolicyName: MediaProcessorPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - s3:*
                  Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*'
                - Effect: Allow
                  Action:
                    - dynamodb:DeleteItem
                    - dynamodb:UpdateItem
                    - dynamodb:PutItem
                    - dynamodb:Query
                  Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CART_ITEMS_TABLE}
                - Effect: Allow
                  Action:
                    - xray:PutTraceSegments
                    - xray:PutTelemetryRecords
                  Resource: '*'
